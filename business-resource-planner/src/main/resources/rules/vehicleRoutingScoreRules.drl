/*
 * JBoss, Home of Professional Open Source
 * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
 * contributors by the @authors tag. See the copyright.txt in the 
 * distribution for a full listing of individual contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,  
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jboss.quickstarts.planner;

dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.jboss.quickstarts.planner.model.Depot
import org.jboss.quickstarts.planner.model.Vehicle
import org.jboss.quickstarts.planner.model.VehicleRoutingSolution
import org.jboss.quickstarts.planner.model.Customer

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "vehicleCapacity"
    when
        $vehicle : Vehicle($capacity : capacity)
        $demandTotal : Number(intValue > $capacity) from accumulate(
            Customer(
                vehicle == $vehicle,
                $demand : demand),
            sum($demand)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $capacity - $demandTotal.intValue());
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "distanceToPreviousStandstill"
    when
        $customer : Customer(previousStandstill != null, $distanceToPreviousStandstill : milliDistanceToPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceToPreviousStandstill);
end

rule "distanceFromLastCustomerToDepot"
    when
        $customer : Customer(previousStandstill != null)
        not Customer(previousStandstill == $customer)
    then
        Vehicle vehicle = $customer.getVehicle();
        scoreHolder.addSoftConstraintMatch(kcontext, - $customer.getMilliDistanceTo(vehicle));
end
